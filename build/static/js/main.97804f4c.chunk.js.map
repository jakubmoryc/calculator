{"version":3,"sources":["components/Display/Display.js","components/NumberTile/NumberTile.js","components/OperationTile/OperationTile.js","components/FunctionTile/FunctionTile.js","components/Calculator/config.js","components/Calculator/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","id","oldNumber","operator","newNumber","NumberTile","number","zero","add","dot","classes","className","onClick","e","preventDefault","OperationTile","operationSign","operationPassed","explicit","FunctionTile","functionPassed","functionName","MAX_NUMBERS","Calculator","state","oldNum","undefined","newNum","isThereADot","isDone","componentDidMount","vh","window","innerHeight","document","documentElement","style","setProperty","addEventListener","addNumber","length","setState","clear","convert","parseFloat","startsWith","substring","passNumbers","prevState","calculate","toString","console","log","handleOperation","this","Component","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97804f4c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Display(props) {\r\n    return (\r\n        <div id=\"display\">\r\n            <div id=\"displayTop\">\r\n                {props.oldNumber}\r\n            </div>\r\n            <div id=\"displayBot\">\r\n                <span>\r\n                    {props.operator}\r\n                </span>\r\n                <span>\r\n                    {props.newNumber}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function NumberTile({number, zero, add, dot}) {\r\n    const isZero = zero ? \"zero\" : \"\"; {/*CSS STUFF */}\r\n    const classes = `tile numberTile ${isZero}`;\r\n    return dot ?\r\n   (\r\n    <a className={classes} onClick={(e) => {e.preventDefault()}}>\r\n      <div>\r\n       {number}\r\n      </div>\r\n    </a>\r\n    ) \r\n    : \r\n    (\r\n    <a className={classes} onClick={(e) => {add(number)}}>\r\n      <div>\r\n       {number}\r\n      </div>\r\n    </a>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function OperationTile({operationSign, operationPassed, explicit}) {\r\n    return (\r\n        <a \r\n        className=\"tile operationTile\" \r\n        onClick={(e) => {\r\n                explicit ?\r\n                operationPassed(true) :\r\n                operationPassed(operationSign)\r\n            }}>\r\n            <div className=\"\">\r\n                {operationSign}\r\n            </div>\r\n        </a>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function FunctionTile(props) {\r\n    return (\r\n        <a className=\"functionTile tile\" onClick={props.functionPassed}>\r\n             <div>\r\n                {props.functionName}\r\n            </div>\r\n        </a>\r\n    )\r\n}\r\n","const MAX_NUMBERS = 8;\r\n\r\nexport {MAX_NUMBERS};","import React, { Component } from 'react'\r\n\r\nimport Display from '../Display/Display'\r\nimport NumberTile from '../NumberTile/NumberTile'\r\nimport OperationTile from '../OperationTile/OperationTile'\r\nimport FunctionTile from '../FunctionTile/FunctionTile'\r\n\r\nimport {MAX_NUMBERS } from './config'\r\n\r\nexport default class Calculator extends Component {\r\n\r\n    state = {\r\n        oldNum: undefined,\r\n        newNum: \"0\",\r\n        operator: undefined,\r\n        isThereADot: false,\r\n        isDone: false\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        // First we get the viewport height and we multiple it by 1% to get a value for a vh unit\r\n        let vh = window.innerHeight * 0.01;\r\n        // Then we set the value in the --vh custom property to the root of the document\r\n        document.documentElement.style.setProperty('--vh', `${vh}px`);\r\n\r\n        // We listen to the resize event\r\n        window.addEventListener('resize', () => {\r\n        // We execute the same script as before\r\n        let vh = window.innerHeight * 0.01;\r\n        document.documentElement.style.setProperty('--vh', `${vh}px`);\r\n        });\r\n    }\r\n\r\n    addNumber = (number) => {\r\n        if(this.state.newNum.length > MAX_NUMBERS) {\r\n            {/* dont do anything if maximum specified is reached */}\r\n            return;\r\n          }\r\n          else if (this.state.newNum === \"0\" && number === \".\") {\r\n            this.setState({\r\n                newNum: this.state.newNum + (number),\r\n                isThereADot: true\r\n            })\r\n          }\r\n          else if (this.state.newNum === \"0\") {\r\n            this.setState({\r\n                newNum: number\r\n            })\r\n          }\r\n          else if (number === \".\") {\r\n            this.setState({\r\n                newNum: this.state.newNum + (number),\r\n                isThereADot: true\r\n            })\r\n          }\r\n          else {\r\n            this.setState({\r\n                newNum: this.state.newNum + (number)\r\n            })\r\n          }\r\n    }\r\n\r\n    clear = () => {\r\n        this.setState({\r\n            oldNum: undefined,\r\n            newNum: \"0\",\r\n            operator: undefined,\r\n            isThereADot: false\r\n        })\r\n    }\r\n\r\n    convert = () => {\r\n        if(parseFloat(this.state.newNum) !== 0 && !this.state.newNum.startsWith(\"-\")) {\r\n            this.setState({\r\n                newNum: \"-\" + this.state.newNum\r\n            });\r\n          }\r\n          else if(parseFloat(this.state.newNum) !== 0) {\r\n            this.setState({\r\n                newNum: this.state.newNum.substring(1)\r\n            })\r\n          }\r\n    }\r\n\r\n    passNumbers = () => {\r\n        this.setState((prevState) => ({\r\n            oldNum: prevState.newNum,\r\n            newNum: \"0\",\r\n            isThereADot: false\r\n        }))\r\n    }\r\n\r\n    calculate = (explicit = false) => {\r\n        switch(this.state.operator) {\r\n            case \"+\":\r\n                this.setState({\r\n                    newNum: (parseFloat(this.state.oldNum) + parseFloat(this.state.newNum)).toString()\r\n                })\r\n                break;\r\n            case \"-\":\r\n                this.setState({\r\n                    newNum: (parseFloat(this.state.oldNum) - parseFloat(this.state.newNum)).toString()\r\n                })\r\n                break;\r\n            case \"X\":\r\n                this.setState({\r\n                    newNum: (parseFloat(this.state.oldNum) * parseFloat(this.state.newNum)).toString()\r\n                })\r\n                break;\r\n            case \"/\":\r\n                this.setState({\r\n                    newNum: (parseFloat(this.state.oldNum) / parseFloat(this.state.newNum)).toString()\r\n                })\r\n                break;\r\n            case \"%\":\r\n                this.setState({\r\n                    newNum: (parseFloat(this.state.oldNum) % parseFloat(this.state.newNum)).toString()\r\n                })\r\n                break;\r\n            default:\r\n        }\r\n        console.log(this.state.newNum.length)\r\n\r\n        if (!explicit) {\r\n            this.passNumbers();\r\n        }\r\n        else {\r\n            this.setState({\r\n                oldNum: undefined,\r\n                operator: undefined,\r\n                isDone: true\r\n            })\r\n        }\r\n    }\r\n\r\n    handleOperation = (operationSign) => {\r\n          if (this.state.oldNum === undefined) {\r\n            this.setState({\r\n                operator: operationSign\r\n            })\r\n            this.passNumbers()\r\n          }\r\n          else {\r\n            this.calculate()\r\n          }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"wrapper\">\r\n                <Display newNumber={this.state.newNum} oldNumber={this.state.oldNum} operator={this.state.operator} />\r\n\r\n                <FunctionTile functionName=\"AC\" functionPassed={this.clear}/>\r\n                <FunctionTile functionName=\"+/-\"functionPassed={this.convert}/>\r\n                <OperationTile operationSign=\"%\" operationPassed={this.handleOperation}/>\r\n                <OperationTile operationSign=\"/\" operationPassed={this.handleOperation}/>\r\n\r\n                <NumberTile number=\"1\" add={this.addNumber}/>\r\n                <NumberTile number=\"2\" add={this.addNumber}/>\r\n                <NumberTile number=\"3\" add={this.addNumber}/>\r\n                <OperationTile operationSign=\"X\" operationPassed={this.handleOperation}/>\r\n\r\n                <NumberTile number=\"4\" add={this.addNumber}/>\r\n                <NumberTile number=\"5\" add={this.addNumber}/>\r\n                <NumberTile number=\"6\" add={this.addNumber}/>\r\n                <OperationTile operationSign=\"-\" operationPassed={this.handleOperation}/>\r\n\r\n                <NumberTile number=\"7\" add={this.addNumber}/>\r\n                <NumberTile number=\"8\" add={this.addNumber}/>\r\n                <NumberTile number=\"9\" add={this.addNumber}/>\r\n                <OperationTile operationSign=\"+\" operationPassed={this.handleOperation}/>\r\n\r\n                {/* the zero prop is used by css */}\r\n                <NumberTile number=\"0\" zero={true} add={this.addNumber}/>\r\n                <NumberTile number=\".\" zero={false} add={this.addNumber} dot={this.state.isThereADot}/>\r\n                <OperationTile operationSign=\"=\" operationPassed={this.calculate} explicit={true}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\n\nimport './style.css'\n\nimport Calculator from './components/Calculator/Calculator'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}